<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" 
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">
<!-- 读取db.properties 文件 -->
<context:property-placeholder location="classpath:db.properties" />
<!-- 配置c3p0连接池 -->
<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
	<property name="driverClass" value="${jdbc.driverClass}"></property>
	<property name="user" value="${jdbc.user}"></property>
	<property name="password" value="${jdbc.password}"></property>
</bean>

	<!-- 核心事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager" >
		<property name="sessionFactory" ref="sessionFactory" ></property>
	</bean>
	<!-- 配置通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
			<tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置将通知织入目标对象 -->
	<aop:config>
		<!-- 配置切点 -->
		<aop:pointcut expression="execution(* com.candy.service.impl.*ServiceImpl.*(..))" id="txPc"/>
		<!-- 配置切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />
		
	</aop:config>
	<!-- 将sessionFactory 配置到spring容器中 -->
	<!-- 加载配置1: 仍然使用外部的hibernate.cfg.xml配置信息 -->
	<!-- 	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" ></property>
	</bean> -->
	<!-- 加载配置方案2:在spring 配置中放置hibernate配置信息 -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 将连接池注入到sessionFactory, hibernate会通过连接池获得连接  -->
		<property name="dataSource" ref="dataSource"></property>
		 
		<property name="hibernateProperties">
			<props>
				<!-- 必选配置 -->  
				<!--  
				<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/candy?useUnicode=true&amp;characterEncoding=utf8</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">root</prop>
				-->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			
				<!-- 可选配置  -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>				
			</props>	
		</property>
		
		<property name="mappingDirectoryLocations" value="classpath:com/candy/domain" ></property>
		
	</bean>
	
	<!-- 注意：action 对象作用范围一定是多例的， 这样才符合struts2架构 -->
	<bean name="userAction" class="com.candy.action.UserAction" scope="prototype">
		<property name="userService" ref="userService" ></property>
	</bean>	
	
	<bean name="customerAction" class="com.candy.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService" ></property>
	</bean>

	<bean name="baseDictAction" class="com.candy.action.BaseDictAction" scope="prototype">
		<!-- property 中的
			name的值是在实现类（com.candy.action.BaseDictAction）中 
			定义的对象（private BaseDictService baseDictService;）的值
			ref的值 是本配置文件中定义的service层（<bean name="baseDictService" class="com.candy.service.impl.BaseDictServiceImpl">）
			的name的值
		-->	
		<property name="baseDictService" ref="baseDictService" ></property>
	</bean>
	
	<!-- service -->
	<bean name="userService" class="com.candy.service.impl.UserServiceImpl">	
		<property name="sud" ref="userDao"></property>
	</bean>
		
	<bean name="customerService" class="com.candy.service.impl.CustomerServiceImpl">
		<property name="customerDao" ref="customerDao"></property>
	</bean>

	<bean name="baseDictService" class="com.candy.service.impl.BaseDictServiceImpl">
		<!-- property 中的
			name的值是在实现类（com.candy.service.impl.BaseDictServiceImpl）中 
			定义的对象（private BaseDictDao bdd;）的值
			ref的值 是本配置文件中定义的dao层（<bean name="baseDictDao" class="com.candy.dao.impl.BaseDictDaoImpl">）
			的name的值
		-->
		<property name="bdd" ref="baseDictDao"></property>
		
	</bean>
	
	<!-- dao -->
	<bean name="userDao" class="com.candy.dao.impl.UserDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" ></property>	
	</bean>
	
	<bean name="customerDao" class="com.candy.dao.impl.CustomerDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" ></property>	
	</bean>

	<bean name="baseDictDao" class="com.candy.dao.impl.BaseDictDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory" ></property>	
	</bean>
		
	<!-- 
	<bean name="userDao" class="com.candy.test.TestHibernateTemplDao">
		
		<property name="sessionFactory" ref="sessionFactory" ></property>	
	</bean>
	 -->

	
</beans>